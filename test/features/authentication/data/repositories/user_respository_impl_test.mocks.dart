// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_dev_test/test/features/authentication/data/repositories/user_respository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_dev_test/features/authentication/data/datasources/user_remote_data_source.dart'
    as _i3;
import 'package:flutter_dev_test/features/authentication/data/models/user_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i3.UserRemoteDataSource {
  @override
  _i4.Future<_i2.UserModel> logIn({
    required String? userName,
    required String? password,
    required String? secret,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [],
          {
            #userName: userName,
            #password: password,
            #secret: secret,
          },
        ),
        returnValue: _i4.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #logIn,
            [],
            {
              #userName: userName,
              #password: password,
              #secret: secret,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #logIn,
            [],
            {
              #userName: userName,
              #password: password,
              #secret: secret,
            },
          ),
        )),
      ) as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<String> recoverySecret({
    required String? userName,
    required String? password,
    required String? code,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recoverySecret,
          [],
          {
            #userName: userName,
            #password: password,
            #code: code,
          },
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #recoverySecret,
            [],
            {
              #userName: userName,
              #password: password,
              #code: code,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #recoverySecret,
            [],
            {
              #userName: userName,
              #password: password,
              #code: code,
            },
          ),
        )),
      ) as _i4.Future<String>);
}
